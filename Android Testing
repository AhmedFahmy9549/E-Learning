
Unit testing:

            Unit testing for Android can be classified into:  
            
             * Local unit tests - tests which can run on the JVM.
             * Instrumented unit tests - tests which require the Android system.

        Note: If you write local unit test and have dependencies to Android API, you need to replace them, e.g., via a mocking framework like Mockito
        
        
  * 70-80 % unit tests to ensure stability of your code basis
  * 20-30 % functional tests to ensure that the application really works
  * 10 % some cross functional tests if your application integrates intensively with other Application components    
  
  
    
    AndroidJUnitRunner:  ( tool for Android testing)
             
           The library provides a JUnit 4-compatible test runner (AndroidJUnitRunner), the Espresso test framework and the UI Automator test framework.
                       
                    * Espresso : test framework can be used to test the User Interface of your application
                    * UI Automator allows to write cross application functional tests.
                    
                    
         AndroidJunitRunner provides access to the instrumentation API, via the InstrumentationRegistery.
        
              - InstrumentationRegistry.getInstrumentation(), returns the Instrumentation currently running.
              - InstrumentationRegistry.getContext(), returns the Context of this Instrumentationâ€™s package.
              - InstrumentationRegistry.getTargetContext(), returns the application Context of the target application.
              - InstrumentationRegistry.getArguments(), returns a copy of arguments Bundle that was passed to this Instrumentation. This is useful when you want to access the command line arguments passed to the instrumentation for your test.

    
          * app/src/main/java- for your source code of your main application build
          * app/src/test/java - for any unit test which can run on the JVM
          * app/src/androidTest/java - for any test which should run on an Android device


    A unit tests for an Android application can be:

       - local unit test - which runs on the JVM
       - Android unit test - which runs on the Android runtime
       
       

       Instrumented unit:
                        tests are unit tests that run on Android devices and emulators instead of running on the Java virtual machine.
                        These tests have access to the real device and its resources and are useful to unit test functionality which cannot be easily mocked by mocking frameworks
                        
                   An instrumentation-based test class allows you to send key events (or touch events) to the application under test.
                   With user interface testing framework like Espresso, the developer rarely has to use the instrumentation API directly.
                        
                        
        *  How the Android system executes tests?             
             The InstrumentationTestRunner is the base test runner for Android tests. This test runner starts and loads the test methods. 
             Via the instrumentation API it communicates with the Android system. If you start a test for an Android application, 
             the Android system kills any process of the application under test and then loads a new instance. 
             It does not start the application, this is the responsibility of the test methods.
             The test method controls the life cycle of the components of the application.     
      
               The test runner also calls the onCreate() method of the application and activity under test during its initialization.

         * Mocking objects in Android:
                       he mocking framework Mockito can also be used for instrumentation tests.
                       This allows you to replace parts of the Android system which are not interesting for the test.
                       The Android framework provided in the past specialized mocking classes but these are not necessary anymore.
